import cv2
import os
import numpy as np

#안녕하세요


# Parameters for drawing  
drawing = False  # True if the mouse is pressed
ix, iy = -1, -1  # Initial x, y coordinates of the region

# List to store segmentation points
annotations = []

# Mouse callback function to draw contours
def draw_contour(event, x, y, flags, param):
    global ix, iy, drawing

    if event == cv2.EVENT_LBUTTONDOWN:
        drawing = True
        ix, iy = x, y
        annotations.append([(x, y)])  # Start a new contour

    elif event == cv2.EVENT_MOUSEMOVE:
        if drawing:
            # Add points to the current contour
            annotations[-1].append((x, y))

    elif event == cv2.EVENT_LBUTTONUP:
        drawing = False
        # Close the contour by connecting the last point to the first
        annotations[-1].append((x, y))

# Function to display the image and collect annotations
def segment_image(image_path, save_as_jpg=False):
    # Read the image
    image = cv2.imread(image_path)
    if image is None:
        print("Image not found!")
        return

    # If save_as_jpg is True, convert the image to .jpg and save
    if save_as_jpg:
        jpg_path = os.path.splitext(image_path)[0] + ".jpg"
        cv2.imwrite(jpg_path, image)  # Save the image as .jpg
        print(f"Image converted and saved as {jpg_path}")

    # Create a clone of the image for annotation display
    annotated_image = image.copy()
    cv2.namedWindow("Image Segmentation")
    cv2.setMouseCallback("Image Segmentation", draw_contour)

    while True:
        # Show the annotations on the cloned image
        temp_image = annotated_image.copy()
        for contour in annotations:
            points = np.array(contour, dtype=np.int32)
            cv2.polylines(temp_image, [points], isClosed=True, color=(0, 255, 0), thickness=2)

        # Display the image with annotations
        cv2.imshow("Image Segmentation", temp_image)
        
        # Press 's' to save annotations, 'c' to clear, 'q' to quit, and 'ESC' to close the window
        key = cv2.waitKey(1) & 0xFF
        if key == ord("s"):
            # Save annotations
            with open("annotations.txt", "w") as f:
                for contour in annotations:
                    f.write(str(contour) + "\n")
            print("Annotations saved to annotations.txt")
        elif key == ord("c"):
            # Clear annotations
            annotations.clear()
            annotated_image = image.copy()
            print("Annotations cleared")
        elif key == ord("q"):
            # Exit the segmentation for the current image
            print("Exiting segmentation...")
            break  # Break the loop and stop the segmentation process
        elif key == 27:  # ESC key to close the window and exit the program
            print("ESC key pressed. Exiting program.")
            cv2.destroyAllWindows()  # Close the OpenCV window
            exit()  # Exit the entire program

    # Close all OpenCV windows
    cv2.destroyAllWindows()

# Example usage
if __name__ == "__main__":
    PathNames = r"C:\Users\cic\Desktop\good\Online_Repo\Image_dataset"
    FIleNames = os.listdir(PathNames)
    
    # Filtering for .jpg files
    ext = 'jpg'
    FileNames = [f for f in FIleNames if f.endswith('.jpg')]

    for filename in FileNames:
        image_path = os.path.join(PathNames, filename)

        # Convert the image to JPG before segmentation if needed
        segment_image(image_path, save_as_jpg=True)  # `save_as_jpg=True` will save as .jpg

        # When 'q' is pressed, the segmentation for the current image will be stopped.
